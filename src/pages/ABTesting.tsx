import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from "recharts";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { Beaker, Mail, Users, Target, TrendingUp, Copy, Trash2, Play, Pause, ArrowRight, CheckCircle2 } from "lucide-react";
import { toast } from "@/hooks/use-toast";

interface ABTest {
  id: string;
  name: string;
  status: "draft" | "running" | "completed" | "paused";
  variantA: {
    name: string;
    subject: string;
    content: string;
    sent: number;
    opened: number;
    clicked: number;
    converted: number;
  };
  variantB: {
    name: string;
    subject: string;
    content: string;
    sent: number;
    opened: number;
    clicked: number;
    converted: number;
  };
  winner?: "A" | "B";
  confidence: number;
  startDate: string;
  endDate?: string;
  audience: number;
  splitRatio: string;
}

const mockTests: ABTest[] = [
  {
    id: "1",
    name: "–¢–µ—Å—Ç —Ç–µ–º—ã –ø–∏—Å—å–º–∞ - –°–∫–∏–¥–∫–∏",
    status: "completed",
    variantA: {
      name: "–í–∞—Ä–∏–∞–Ω—Ç A",
      subject: "–°–∫–∏–¥–∫–∞ 20% —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!",
      content: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å...",
      sent: 5000,
      opened: 1500,
      clicked: 450,
      converted: 90,
    },
    variantB: {
      name: "–í–∞—Ä–∏–∞–Ω—Ç B",
      subject: "–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –≤–Ω—É—Ç—Ä–∏ üéÅ",
      content: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å...",
      sent: 5000,
      opened: 2100,
      clicked: 735,
      converted: 162,
    },
    winner: "B",
    confidence: 95.8,
    startDate: "2024-03-15",
    endDate: "2024-03-18",
    audience: 10000,
    splitRatio: "50/50",
  },
  {
    id: "2",
    name: "–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏",
    status: "running",
    variantA: {
      name: "–£—Ç—Ä–æ (9:00)",
      subject: "–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –Ω–∞—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
      content: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –£ –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è –≤–∞—Å...",
      sent: 3000,
      opened: 720,
      clicked: 180,
      converted: 36,
    },
    variantB: {
      name: "–í–µ—á–µ—Ä (19:00)",
      subject: "–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –Ω–∞—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
      content: "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –£ –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è –≤–∞—Å...",
      sent: 2800,
      opened: 980,
      clicked: 294,
      converted: 71,
    },
    confidence: 72.3,
    startDate: "2024-03-20",
    audience: 8000,
    splitRatio: "50/50",
  },
];

export default function ABTesting() {
  const [tests] = useState<ABTest[]>(mockTests);
  const [selectedTest, setSelectedTest] = useState<ABTest | null>(tests[0]);
  const [newTestMode, setNewTestMode] = useState(false);

  const getStatusBadge = (status: ABTest["status"]) => {
    switch (status) {
      case "running":
        return (
          <Badge className="bg-gradient-blue text-white border-0">
            <Play className="h-3 w-3 mr-1" />
            –ó–∞–ø—É—â–µ–Ω
          </Badge>
        );
      case "completed":
        return (
          <Badge className="bg-gradient-green text-white border-0">
            <CheckCircle2 className="h-3 w-3 mr-1" />
            –ó–∞–≤–µ—Ä—à–µ–Ω
          </Badge>
        );
      case "paused":
        return (
          <Badge className="bg-gradient-yellow text-white border-0">
            <Pause className="h-3 w-3 mr-1" />
            –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          </Badge>
        );
      default:
        return (
          <Badge variant="outline">
            –ß–µ—Ä–Ω–æ–≤–∏–∫
          </Badge>
        );
    }
  };

  const calculateMetrics = (variant: ABTest["variantA"] | ABTest["variantB"]) => {
    const openRate = variant.sent > 0 ? (variant.opened / variant.sent * 100).toFixed(1) : "0";
    const clickRate = variant.opened > 0 ? (variant.clicked / variant.opened * 100).toFixed(1) : "0";
    const conversionRate = variant.clicked > 0 ? (variant.converted / variant.clicked * 100).toFixed(1) : "0";
    
    return { openRate, clickRate, conversionRate };
  };

  const getComparisonData = () => {
    if (!selectedTest) return [];
    
    const metricsA = calculateMetrics(selectedTest.variantA);
    const metricsB = calculateMetrics(selectedTest.variantB);
    
    return [
      {
        metric: "–û—Ç–∫—Ä—ã—Ç–∏—è",
        "–í–∞—Ä–∏–∞–Ω—Ç A": parseFloat(metricsA.openRate),
        "–í–∞—Ä–∏–∞–Ω—Ç B": parseFloat(metricsB.openRate),
      },
      {
        metric: "–ö–ª–∏–∫–∏",
        "–í–∞—Ä–∏–∞–Ω—Ç A": parseFloat(metricsA.clickRate),
        "–í–∞—Ä–∏–∞–Ω—Ç B": parseFloat(metricsB.clickRate),
      },
      {
        metric: "–ö–æ–Ω–≤–µ—Ä—Å–∏—è",
        "–í–∞—Ä–∏–∞–Ω—Ç A": parseFloat(metricsA.conversionRate),
        "–í–∞—Ä–∏–∞–Ω—Ç B": parseFloat(metricsB.conversionRate),
      },
    ];
  };

  const getPieData = () => {
    if (!selectedTest) return [];
    
    return [
      { name: selectedTest.variantA.name, value: selectedTest.variantA.converted, fill: "hsl(var(--primary))" },
      { name: selectedTest.variantB.name, value: selectedTest.variantB.converted, fill: "hsl(var(--accent))" },
    ];
  };

  const handleCreateTest = () => {
    setNewTestMode(true);
    toast({
      title: "–°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞",
      description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞",
    });
  };

  const handleDuplicateTest = () => {
    toast({
      title: "–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω",
      description: "–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
          <p className="text-muted-foreground">
            –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleDuplicateTest}>
            <Copy className="h-4 w-4 mr-2" />
            –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button variant="gradient" onClick={handleCreateTest}>
            <Beaker className="h-4 w-4 mr-2" />
            –ù–æ–≤—ã–π —Ç–µ—Å—Ç
          </Button>
        </div>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã</CardTitle>
              <CardDescription>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</CardDescription>
            </CardHeader>
            <CardContent className="space-y-2">
              {tests.map((test) => (
                <div
                  key={test.id}
                  className={`p-3 rounded-lg border cursor-pointer transition-colors ${
                    selectedTest?.id === test.id ? "bg-muted border-primary" : "hover:bg-muted/50"
                  }`}
                  onClick={() => setSelectedTest(test)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="font-medium">{test.name}</div>
                    {getStatusBadge(test.status)}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    –ê—É–¥–∏—Ç–æ—Ä–∏—è: {test.audience.toLocaleString()} ‚Ä¢ {test.splitRatio}
                  </div>
                  {test.winner && (
                    <div className="text-sm mt-2">
                      <span className="text-gradient-green font-medium">
                        –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –í–∞—Ä–∏–∞–Ω—Ç {test.winner}
                      </span>
                      <span className="text-muted-foreground ml-2">
                        ({test.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
                      </span>
                    </div>
                  )}
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          {selectedTest && (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>{selectedTest.name}</CardTitle>
                  <CardDescription>
                    –ü–µ—Ä–∏–æ–¥: {selectedTest.startDate} - {selectedTest.endDate || "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Tabs defaultValue="overview">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="overview">–û–±–∑–æ—Ä</TabsTrigger>
                      <TabsTrigger value="variants">–í–∞—Ä–∏–∞–Ω—Ç—ã</TabsTrigger>
                      <TabsTrigger value="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</TabsTrigger>
                    </TabsList>

                    <TabsContent value="overview" className="space-y-4">
                      <div className="grid gap-4 md:grid-cols-2">
                        <Card>
                          <CardHeader className="pb-3">
                            <CardTitle className="text-base">
                              {selectedTest.variantA.name}
                              {selectedTest.winner === "A" && (
                                <Badge className="ml-2 bg-gradient-green text-white border-0">
                                  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                                </Badge>
                              )}
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</span>
                              <span className="font-medium">{selectedTest.variantA.sent.toLocaleString()}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–û—Ç–∫—Ä—ã—Ç–æ:</span>
                              <span className="font-medium">
                                {selectedTest.variantA.opened.toLocaleString()} ({calculateMetrics(selectedTest.variantA).openRate}%)
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–ö–ª–∏–∫–æ–≤:</span>
                              <span className="font-medium">
                                {selectedTest.variantA.clicked.toLocaleString()} ({calculateMetrics(selectedTest.variantA).clickRate}%)
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
                              <span className="font-medium text-gradient-green">
                                {selectedTest.variantA.converted.toLocaleString()} ({calculateMetrics(selectedTest.variantA).conversionRate}%)
                              </span>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader className="pb-3">
                            <CardTitle className="text-base">
                              {selectedTest.variantB.name}
                              {selectedTest.winner === "B" && (
                                <Badge className="ml-2 bg-gradient-green text-white border-0">
                                  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                                </Badge>
                              )}
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</span>
                              <span className="font-medium">{selectedTest.variantB.sent.toLocaleString()}</span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–û—Ç–∫—Ä—ã—Ç–æ:</span>
                              <span className="font-medium">
                                {selectedTest.variantB.opened.toLocaleString()} ({calculateMetrics(selectedTest.variantB).openRate}%)
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–ö–ª–∏–∫–æ–≤:</span>
                              <span className="font-medium">
                                {selectedTest.variantB.clicked.toLocaleString()} ({calculateMetrics(selectedTest.variantB).clickRate}%)
                              </span>
                            </div>
                            <div className="flex justify-between text-sm">
                              <span className="text-muted-foreground">–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
                              <span className="font-medium text-gradient-green">
                                {selectedTest.variantB.converted.toLocaleString()} ({calculateMetrics(selectedTest.variantB).conversionRate}%)
                              </span>
                            </div>
                          </CardContent>
                        </Card>
                      </div>

                      <Card>
                        <CardHeader className="pb-3">
                          <CardTitle className="text-base">–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span className="text-sm text-muted-foreground">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                              <span className={`font-medium ${selectedTest.confidence >= 95 ? "text-gradient-green" : "text-gradient-yellow"}`}>
                                {selectedTest.confidence}%
                              </span>
                            </div>
                            <Progress value={selectedTest.confidence} className="h-2" />
                            <p className="text-xs text-muted-foreground">
                              {selectedTest.confidence >= 95 
                                ? "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã. –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ."
                                : "–¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏."}
                            </p>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    <TabsContent value="variants" className="space-y-4">
                      <div className="grid gap-4 md:grid-cols-2">
                        <Card>
                          <CardHeader>
                            <CardTitle className="text-base">{selectedTest.variantA.name}</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="text-xs">–¢–µ–º–∞ –ø–∏—Å—å–º–∞</Label>
                              <div className="mt-1 p-2 bg-muted rounded text-sm">
                                {selectedTest.variantA.subject}
                              </div>
                            </div>
                            <div>
                              <Label className="text-xs">–ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞</Label>
                              <div className="mt-1 p-2 bg-muted rounded text-sm">
                                {selectedTest.variantA.content}
                              </div>
                            </div>
                          </CardContent>
                        </Card>

                        <Card>
                          <CardHeader>
                            <CardTitle className="text-base">{selectedTest.variantB.name}</CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="text-xs">–¢–µ–º–∞ –ø–∏—Å—å–º–∞</Label>
                              <div className="mt-1 p-2 bg-muted rounded text-sm">
                                {selectedTest.variantB.subject}
                              </div>
                            </div>
                            <div>
                              <Label className="text-xs">–ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞</Label>
                              <div className="mt-1 p-2 bg-muted rounded text-sm">
                                {selectedTest.variantB.content}
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    </TabsContent>

                    <TabsContent value="analytics" className="space-y-4">
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-base">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <ChartContainer
                            config={{
                              "–í–∞—Ä–∏–∞–Ω—Ç A": {
                                label: "–í–∞—Ä–∏–∞–Ω—Ç A",
                                color: "hsl(var(--primary))",
                              },
                              "–í–∞—Ä–∏–∞–Ω—Ç B": {
                                label: "–í–∞—Ä–∏–∞–Ω—Ç B",
                                color: "hsl(var(--accent))",
                              },
                            }}
                            className="h-[300px]"
                          >
                            <ResponsiveContainer width="100%" height="100%">
                              <BarChart data={getComparisonData()}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="metric" />
                                <YAxis />
                                <ChartTooltip content={<ChartTooltipContent />} />
                                <Legend />
                                <Bar dataKey="–í–∞—Ä–∏–∞–Ω—Ç A" fill="hsl(var(--primary))" />
                                <Bar dataKey="–í–∞—Ä–∏–∞–Ω—Ç B" fill="hsl(var(--accent))" />
                              </BarChart>
                            </ResponsiveContainer>
                          </ChartContainer>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader>
                          <CardTitle className="text-base">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–π</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <ChartContainer
                            config={{
                              conversions: {
                                label: "–ö–æ–Ω–≤–µ—Ä—Å–∏–∏",
                              },
                            }}
                            className="h-[200px]"
                          >
                            <ResponsiveContainer width="100%" height="100%">
                              <PieChart>
                                <Pie
                                  data={getPieData()}
                                  cx="50%"
                                  cy="50%"
                                  labelLine={false}
                                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                                  outerRadius={80}
                                  fill="#8884d8"
                                  dataKey="value"
                                >
                                  {getPieData().map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={entry.fill} />
                                  ))}
                                </Pie>
                                <Tooltip />
                              </PieChart>
                            </ResponsiveContainer>
                          </ChartContainer>
                        </CardContent>
                      </Card>
                    </TabsContent>
                  </Tabs>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}